#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from collections import defaultdict
from logging import _levelNames as logLevels, exception, warning, info, basicConfig
from optparse import Option, OptionParser, OptionValueError
from os.path import basename, splitext
from time import time

from java2python.block import Module
from java2python.config import Config
from java2python.lib.colortools import colors
from java2python.lib.transform import buildAST


version = '0.5'


def isWindows():
    return sys.platform.startswith('win')


def badLogLevel(name, value):
    msg = 'option %s: invalid loglevel: %r'
    raise OptionValueError(msg % (name, value))


def checkLogLevel(option, opt, value):
    try:
        lvl = int(value)
    except (ValueError, ):
        name = value.upper()
        if name not in logLevels:
            badLogLevel(opt, value)
        lvl = logLevels[name]
    else:
        if lvl not in logLevels:
            badLogLevel(opt, value)
    return lvl


class LocalOption(Option):
    TYPES = Option.TYPES + ('loglevel', )
    TYPE_CHECKER = Option.TYPE_CHECKER.copy()
    TYPE_CHECKER['loglevel'] = checkLogLevel


def main(options):
    timed = defaultdict(time)
    timed['overall']

    configs = options.configs
    if options.includedefaults:
        configs.insert(0, 'java2python.config.default')

    filein = fileout = filedefault = '-'
    if options.inputfile and not isinstance(options.inputfile, file):
	filein = options.inputfile
    if options.outputfile and not isinstance(options.outputfile, file):
	fileout = basename(options.outputfile)
    elif fileout != filedefault:
	fileout = '%s.py' % (splitext(filein)[0])

    try:
	if filein != '-':
	    source = open(filein).read()
	else:
	    source = sys.stdin.read()
    except (IOError, ), exc:
        code, msg = exc.args[0:2]
        print 'IOError: %s.' % (msg, )
        return code

    timed['comp']
    try:
	tree = buildAST(source)
    except (Exception, ), exc:
        exception('exception while parsing')
        return 1
    timed['comp_finish']

    module = Module(Config(configs))
    module.name = splitext(basename(filein))[0] if filein != '-' else '<stdin>'
    timed['xform']
    module.walk(tree)
    timed['xform_finish']

    timed['encode']
    source = unicode(module)
    timed['encode_finish']
    timed['overall_finish']

    if options.javaast:
	tree.dump(sys.stderr)
	print >> sys.stderr

    if options.pytree:
	module.dumpRepr(sys.stderr)
	print >> sys.stderr

    if not options.skipsource:
	if fileout == filedefault:
	    output = sys.stdout
	else:
	    output = open(fileout, 'w')
	module.name = splitext(filein)[0] if filein != '-' else '<stdin>'
	print >> output, source

    try:
        compile(source, '<string>', 'exec')
    except (SyntaxError, ), ex:
        warning('Generated source has invalid syntax.')
    else:
        info('Generated source has valid syntax.')

    info('Parse:     %.4f seconds', timed['comp_finish'] - timed['comp'])
    info('Transform: %.4f seconds', timed['xform_finish'] - timed['xform'])
    info('Encode:    %.4f seconds', timed['encode_finish'] - timed['encode'])
    info('Total:     %.4f seconds', timed['overall_finish'] - timed['overall'])
    return 0


def config(argv):
    parser = OptionParser(option_class=LocalOption,
                          version='%prog ' + version)
    parser.add_option('-i', '--input', dest='inputfile',
		      help='Read from INPUTFILE.  May use - for stdin.',
		      metavar='INPUTFILE', default=None)
    parser.add_option('-o', '--output', dest='outputfile',
		      help='Write to OUTPUTFILE.  May use - for stdout.',
		      metavar='OUTPUTFILE', default=None)
    parser.add_option('-c', '--config', dest='configs',
		      help='Use CONFIG module (not file).  May be repeated.',
		      metavar='CONFIG', default=[],
		      action='append')
    parser.add_option('-n', '--nodefaults', dest='includedefaults',
		      help='Ignore default configuration module.',
		      default=True, action='store_false')
    parser.add_option('-l', '--loglevel', dest='loglevel',
		      help='Set log level by name or value.',
		      default='WARN', type='loglevel')
    parser.add_option('-p', '--python-tree', dest='pytree',
		      help='Print python object tree to stderr.',
		      default=False, action='store_true')
    parser.add_option('-j', '--java-ast', dest='javaast',
		      help='Print java source AST tree to stderr.',
		      default=False, action='store_true')
    parser.add_option('-s', '--skip-source', dest='skipsource',
		      help='Skip writing translated source; useful when printing trees',
		      default=False, action='store_true')
    parser.add_option('-r', '--nocolor', dest='nocolor',
		      help='Disable color output.' +\
  		          ('  No effect on Win OS.' if isWindows() else ''),
		      default=False, action='store_true')

    options, args = parser.parse_args(argv)
    if len(args) > 2:
	parser.error('Only one input file supported.')
    elif len(args) == 2:
	options.inputfile = args[1]
    if options.inputfile == '-':
        options.inputfile = sys.stdin
    if options.outputfile == '-':
        options.outputfile = sys.stdout
    ## these next statements don't belong here, but this is as good a
    ## place as any.
    if isWindows() or options.nocolor:
	colors.clear()
    fmt = '# %(levelname)s %(funcName)s: %(message)s'
    basicConfig(level=options.loglevel, format=fmt)
    return options


if __name__ == '__main__':
    sys.exit(main(config(sys.argv)))
