#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""

"""
import sys
from antlr3 import FileStream, StringStream, CommonTokenStream
from java2python.lib import JavaParser as Jp
from java2python.lib.JavaLexer import JavaLexer, COMMENT, LINE_COMMENT, DEFAULT_CHANNEL, CLASS, HIDDEN
try:
    import psyco
except (ImportError, ):
    pass
else:
    pass # psyco.full()


def buildTokenMap():
    return dict(
        [(m, l) for l, m in [(k, getattr(Jp, k)) for k in dir(Jp)] if isinstance(m, int)]
        )
tokenMap = buildTokenMap()


def load_trees((stream_type, source)):
    for channel in (DEFAULT_CHANNEL, HIDDEN):
        stream = stream_type(source)
        lexer = JavaLexer(stream)
        tokens = CommonTokenStream(lexer, channel=channel)
        tokens.channelOverrideMap[CLASS] = DEFAULT_CHANNEL
        parser = Jp.JavaParser(tokens)
        yield parser.javaSource().tree


def show_trees(trees):
    for tree in trees:
        show(tree)


def show(node, level=0):
    txt = node.getText()
    typ = tokenMap.get(node.getType(), '?')
    args = ('    '*level,
            typ,
            (' : ' if txt != typ else ''),
            (txt if txt != typ else ''))
    print '%s%s%s%s' % args
    for i in range(node.getChildCount()):
        show(node.getChild(i), level+1)
    return 0


if __name__ == '__main__':
    try:
        src = sys.argv[1]
        locs = ((StringStream, sys.stdin.read())
                if src == '-' else (FileStream, src))
        trees = load_trees(locs)
        sys.exit(show_trees(trees))
    except (Exception, ), exc:
        print exc
        raise

